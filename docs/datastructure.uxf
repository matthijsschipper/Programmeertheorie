<diagram program="umletino" version="14.4.0-SNAPSHOT"><zoom_level>10</zoom_level><element><id>UMLClass</id><coordinates><x>640</x><y>38</y><w>210</w><h>200</h></coordinates><panel_attributes>Crossing
--
location: [tuple]_[str]is_gate_ [boolean]
directions: [list]
initial_amount_of_directions: [int]
visited: [boolean]
intersection: [boolean]
--
set_directions(self, grid_size)
__repr__(self)
place_gate(self, number)
add_blockade(self, direction)
remove_blockade(self, direction)
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>60</x><y>38</y><w>210</w><h>340</h></coordinates><panel_attributes>Grid
--
grid: [nested lists]
size: [list]
gate_coordinates: [dict]
netlist: [list]
amount_of_intersections: [int]
chip_id: [int]
netlist_id: [int]
current_crossing: [crossing object]
current_net: [net object]
--
read_chip_data(self, file)
make_grid(self)
set_netlist(self, file)
available_nets(self)
choose_net(self, net)
add_to_net(self, direction)
delete_net(self, net, steps)
delete_last_crossing(self, net)
get_directions(self)
get_directions_to_end(self)
get_output(self)</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>360</x><y>38</y><w>210</w><h>240</h></coordinates><panel_attributes>Net
--
start: [crossing object]
end: [crossing object]
routelist: [list of crossing objects]
finished: [boolean]
--
__repr__(self)
add_crossing(self, crossing)
get_latest_crossing(self)
get_latest_crossings(self)
delete_last_crossing(self)
show_route_coordinates(self)
get_route_to_end(self)
mark_unfinished(self)
get_length(self)
</panel_attributes><additional_attributes></additional_attributes></element></diagram>